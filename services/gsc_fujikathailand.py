# services/gsc_fujikathailand.py
from google.oauth2 import service_account
from googleapiclient.discovery import build
import pandas as pd
import streamlit as st
import traceback
from datetime import date, timedelta

SCOPES = ["https://www.googleapis.com/auth/webmasters.readonly"]

# ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô domain property ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ sc-domain
SITE_URL = "sc-domain:fujikathailand.com"
# ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL-prefix property ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ:
#SITE_URL = "https://fujikathailand.com/"

def get_last_week_dates():
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ start_date, end_date ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‚Äì‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)"""
    today = date.today()
    # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ
    this_monday = today - timedelta(days=today.weekday())
    # ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    last_monday = this_monday - timedelta(days=7)
    # ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß
    last_sunday = this_monday - timedelta(days=1)
    return last_monday.isoformat(), last_sunday.isoformat()

def get_gsc_data():
    try:
        start_date, end_date = get_last_week_dates()

        # ‡πÇ‡∏´‡∏•‡∏î credentials ‡∏à‡∏≤‡∏Å Streamlit secrets
        service_account_info = dict(st.secrets["SERVICE_AC"])
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info, scopes=SCOPES
        )

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á service
        webmasters_service = build("searchconsole", "v1", credentials=credentials)

        # Request body
        request = {
            "startDate": start_date,
            "endDate": end_date,
            "dimensions": ["query"],
            "rowLimit": 10
        }

        response = webmasters_service.searchanalytics().query(
            siteUrl=SITE_URL, body=request
        ).execute()
        print(response)
        print(f"üìÖ Fetching GSC data from {start_date} to {end_date}")
        print("üîç Raw Response:", response)

        rows = response.get("rows", [])
        if not rows:
            print("‚ö†Ô∏è No rows found in GSC response")
            return pd.DataFrame(columns=["query", "clicks", "impressions", "ctr", "position"])

        df = pd.DataFrame([
            {
                "query": row["keys"][0] if "keys" in row and row["keys"] else None,
                "clicks": row.get("clicks", 0),
                "impressions": row.get("impressions", 0),
                "ctr": row.get("ctr", 0),
                "position": row.get("position", 0),
            }
            for row in rows
        ])
        return df

    except Exception as e:
        print("‚ùå Error fetching GSC data:", e)
        print(traceback.format_exc())  # ‡πÅ‡∏™‡∏î‡∏á traceback ‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏ô log
        return pd.DataFrame(columns=["query", "clicks", "impressions", "ctr", "position"])
