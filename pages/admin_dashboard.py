
import os
import sys
import pandas as pd
import numpy as np
import streamlit as st
import altair as alt
import plotly.express as px
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
from api.facebook_graph_api import (
                get_valid_access_token as get_fb_token,
                get_user_pages,
                get_page_insights,
                get_page_posts,
                get_comments,
                refresh_long_lived_token,
                get_page_info
            )
from services.gsc_fujikathailand import *  # ‡∏î‡∏∂‡∏á DataFrame ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(page_title="Fujika Dashboard",page_icon="üåé", layout="wide")
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from api.fujikathailand_rest_api import *#fetch_all_product_sales, fetch_posts, fetch_comments,fetch_product_reviews
# from services.gsc_fujikathailand import *
from collections import defaultdict
from api.fujikaservice_rest_api import *#fetch_service_all_products
service_products = fetch_service_all_products()
products = service_products 
sales_data, buyers_list, total_orders = fetch_sales_and_buyers_all(order_status="completed")
import json

def make_safe_for_streamlit(df):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å column object/list/dict ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Streamlit ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ"""
    for col in df.columns:
        if df[col].dtype == "object":
            df[col] = df[col].apply(lambda x: json.dumps(x) if isinstance(x, (list, dict)) else str(x))
    return df

def app():
        
    if "role" not in st.session_state or st.session_state["role"] != "admin":
        st.error("‚õî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
        st.stop()

    st.title("üìä Dashboard's ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°")
    
    

    # ---- Top menu to switch view ----
    view = st.selectbox("üîΩ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", ["1 vs 2","‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á" ])


    # ---- Show alternate page ----
    if view == "1 vs 2":
        

        st.set_page_config(page_title="GSC Dashboard", layout="wide")
        st.title("Google Search Console Dashboard")

    # ----------------- Table -----------------
        st.subheader("Top Keywords")
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GSC
        df = get_gsc_data()
    

        if not df.empty:
            st.subheader("Top Keywords")
            st.dataframe(df.sort_values('clicks', ascending=False))

            df_plot = df.rename(columns={
                "query": "Keyword",
                "clicks": "Clicks",
                "impressions": "Impressions",
                "ctr": "CTR",
                "position": "Avg. Position"
            })

            fig = px.bar(
                df_plot.sort_values('Clicks', ascending=False),
                x='Keyword',
                y='Clicks',
                hover_data=['Impressions', 'CTR', 'Avg. Position']
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Search Console")



        st.title("üéâ May I be happy.")
        st.markdown("ü•≥ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ!")
        st.button("üéâ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
    # ---- Show normal dashboard ----
    elif view == "‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏´‡∏•‡πà‡∏á":

        tabs = st.tabs([
            "üì∞ Fujikathailand.com",
            "üè≠ CPSManu.com",
            "üõ†Ô∏è FujikaService.com",
            "üõçÔ∏è Shopee",
            "üì¶ Lazada",
            "üìò Facebook Page/Ads",
            "üí¨ LINE Official Account"
        ])

    

        # --------------------- 1. Fujikathailand ---------------------
        with tabs[0]:
            st.header("üì∞ Website Fujikathailand.com")
            products, buyers, total_orders = fetch_all_product_sales()
            st.subheader("üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
            st.markdown(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.markdown(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏Ç‡∏≤‡∏¢ {total_orders} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                
            # -------------------- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ --------------------
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
            products_sold = [p for p in products if p["quantity_sold"] > 0]

            # ------------------ ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ ------------------
            if products_sold:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                st.markdown("## üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ")

                # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ---
                products_sold_renamed = []
                for p in products_sold:
                    products_sold_renamed.append({
                        "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": p["name"],
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ": p["quantity_sold"],
                        "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°": p["total_revenue"]
                    })
            if products_sold:
                best_selling = max(products_sold, key=lambda x: x["quantity_sold"])
                st.markdown(f"**üìå ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:** {best_selling['name']} ({best_selling['quantity_sold']} ‡∏ä‡∏¥‡πâ‡∏ô)")

                # --- ‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ ---
                fig_qty = px.bar(
                    products_sold_renamed,
                    x="‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
                    y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ",
                    hover_data=["‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°"],
                    title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
                )
                fig_qty.update_layout(xaxis_tickangle=-45)
                st.plotly_chart(fig_qty, use_container_width=True)
            
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô session_state
                if "show_products_table" not in st.session_state:
                    st.session_state.show_products_table = False

                # ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
                if st.button("üõí ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="toggle_products_table_top"):
                    st.session_state.show_products_table = not st.session_state.show_products_table

                # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î
                if st.session_state.show_products_table:
                    st.markdown("### üõí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 57 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

                    # --- ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
                    col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5, 1, 3, 1, 1, 1, 1.5])
                    with col1: st.markdown("**‡∏•‡∏≥‡∏î‡∏±‡∏ö**")
                    with col2: st.markdown("**‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**")
                    with col3: st.markdown("**‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏£‡∏≤‡∏Ñ‡∏≤**")
                    with col4: st.markdown("**‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠**")
                    with col5: st.markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ**")
                    with col6: st.markdown("**‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)**")
                    with col7: st.markdown("**‡πÄ‡∏£‡∏ó‡∏ï‡∏¥‡πâ‡∏á**")

                    st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á

                    # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
                    for idx, p in enumerate(products, start=1):
                        col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5, 1, 3, 1, 1, 1, 1.5])
                        with col1: st.markdown(f"{idx}")
                        with col2: 
                            if p.get("image_url"): st.image(p["image_url"], width=80)
                        with col3:
                            st.markdown(f"**{p.get('name','')}**")
                            st.markdown(f"üíµ {p.get('price',0)} ‡∏ö‡∏≤‡∏ó")
                        with col4: st.markdown(f"{p.get('stock_quantity',0)}")
                        with col5: st.markdown(f"{p.get('quantity_sold',0)}")
                        with col6: st.markdown(f"{p.get('total_revenue',0):,.2f}")
                        with col7: st.markdown(f"{p.get('average_rating',0):.1f} ‚≠ê ({p.get('rating_count',0)})")

                        st.markdown("---")  # ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß

                    # --- ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ---
                    st.write("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô toggle
                    def hide_table():
                        st.session_state.show_products_table = False

                    # --- ‡∏õ‡∏∏‡πà‡∏° toggle ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ---
                    st.write("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
                    spacer1, spacer2, spacer3, spacer4, spacer5, spacer6, col_button = st.columns([1,1,1,1,1,1,1])
                    col_button.button("‚ùå ‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="toggle_products_table_bottom", on_click=hide_table)

                                    
            # ------------------ ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° ------------------
                if products_sold:  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ
                    st.markdown("## üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
                    fig_rev = px.bar(
                        products_sold,
                        x="name",
                        y="total_revenue",
                        hover_data=["quantity_sold"],
                        labels={"total_revenue": "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"},
                        title="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                    )
                    fig_rev.update_layout(xaxis_tickangle=-45)
                    st.plotly_chart(fig_rev, use_container_width=True)

                def summarize_buyers(buyers_list, group_by="email"):
                    """
                    ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    """
                    buyer_count = defaultdict(int)

                    for b in buyers_list:
                        key = b[group_by]  # ‡πÉ‡∏ä‡πâ email ‡∏´‡∏£‡∏∑‡∏≠ phone ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏
                        buyer_count[key] += 1

                    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á dict
                    result = [{"buyer": k, "purchase_count": v} for k, v in buyer_count.items()]
                    return result
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
                products, buyers_list,total_orders = fetch_all_product_sales()

                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ email ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏)
                buyer_summary = summarize_buyers(buyers_list, group_by="email")

                # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢
                df_buyers = pd.DataFrame(buyer_summary)
                # ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                max_purchase = df_buyers['purchase_count'].max()
                st.subheader("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
                st.dataframe(df_buyers[df_buyers['purchase_count'] == max_purchase])
                if st.checkbox("üóÇÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"):
                    st.dataframe(make_safe_for_streamlit(buyers), use_container_width=True)

                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á buyer_summary
                df_buyers = pd.DataFrame(buyer_summary)
                st.dataframe(make_safe_for_streamlit(df_buyers[df_buyers['purchase_count'] == max_purchase]))
                # ‡∏Å‡∏£‡∏≤‡∏ü Top 10 ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                fig = px.scatter(
                df_buyers,
                x="buyer",               # ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ email/phone
                y="purchase_count",      # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
                size="purchase_count",   # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                color="purchase_count",  # ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                labels={"buyer": "‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠", "purchase_count": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠"},
                title="üõí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                )

                fig.update_traces(marker=dict(opacity=0.7, line=dict(width=1, color='DarkSlateGrey')))
                fig.update_layout(xaxis_tickangle=-45)

                st.plotly_chart(fig, use_container_width=True)

                # -------------------- ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠ --------------------
                st.subheader("üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                if st.checkbox("üóÇÔ∏è ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á", key="show_table_1"):
                    
                    st.dataframe(buyers, use_container_width=True)

                # -------------------- ‡πÅ‡∏¢‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ --------------------
                st.subheader("üåè ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ")
                if buyers:
                    region_counts = {}
                    for b in buyers:
                        region = b.get("region", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
                        region_counts[region] = region_counts.get(region, 0) + 1

                regions = list(region_counts.keys())
                counts = list(region_counts.values())

                fig_region = px.pie(
                    names=regions,
                    values=counts,
                    title="‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ"
                )
                st.plotly_chart(fig_region, use_container_width=True)
                
            st.subheader("üó∫Ô∏è ‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î (Choropleth Map)")
            df = pd.DataFrame(buyers_list)

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á province_counts
            province_counts = df["province"].value_counts().reset_index()
            province_counts.columns = ["province", "count"]

            # ‡πÇ‡∏´‡∏•‡∏î GeoJSON ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
            url = "https://raw.githubusercontent.com/apisit/thailand.json/master/thailand.json"
            geojson = requests.get(url).json()

            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô GeoJSON
            thailand_provinces = [feature["properties"]["name"] for feature in geojson["features"]]
            province_counts = province_counts[province_counts["province"].isin(thailand_provinces)]

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
            fig_map = px.choropleth_mapbox(
                province_counts,
                geojson=geojson,
                locations="province",
                featureidkey="properties.name",
                color="count",
                color_continuous_scale="Blues",
                mapbox_style="carto-positron",
                zoom=5,
                center={"lat": 13.736717, "lon": 100.523186},
                opacity=0.6,
                title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢"
            )

            st.plotly_chart(fig_map, use_container_width=True)
            st.markdown("---")
            st.title("üìå Fujika WordPress Posts & Comments")

            # -------------------- ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå --------------------
            st.header("‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
            try:
                posts = fetch_posts(per_page=5)
            except Exception as e:
                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ: {e}")
                posts = []

            for p in posts:
                st.subheader(p["title"]["rendered"])
                st.markdown(p.get("excerpt", {}).get("rendered", ""), unsafe_allow_html=True)
                
                # -------------------- ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå --------------------
                post_id = p["id"]
                try:
                    comments = fetch_comments(post_id)
                except Exception as e:
                    st.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå {post_id} ‡πÑ‡∏î‡πâ: {e}")
                    comments = []

                if comments:
                    st.markdown(f"**‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå ({len(comments)})**")
                    for c in comments:
                        st.markdown(f"- **{c['author_name']}**: {c['content']['rendered']}", unsafe_allow_html=True)
                else:
                    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
            
        # --------------------- 2. CPSManu ---------------------
        with tabs[1]:
            st.header("üè≠ WordPress Posts: cpsmanu.com")
            st.write("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ""https://www.cpsmanu.com/")
            st.title("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")


            images = [
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-sh_gr.jpg", "link": "https://www.cpsmanu.com/water-heater/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-pu_gr.jpg", "link": "https://www.cpsmanu.com/home-water-pump/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-wa_gr.jpg", "link": "https://www.cpsmanu.com/water-purifier/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-st_gr-.jpg", "link": "https://www.cpsmanu.com/electric-stove/"},
                {"url": "https://www.cpsmanu.com/wp-content/uploads/2023/02/icon-oem_gr.jpg", "link": "https://www.cpsmanu.com/oem-odm-services/"},
            ]

            cols = st.columns(len(images))

            for col, img in zip(cols, images):
                with col:
                    st.markdown(f'<a href="{img["link"]}" target="_blank"><img src="{img["url"]}" width="120" style="border-radius: 8px;"></a>', unsafe_allow_html=True)



        # --------------------- 3. FujikaService ---------------------
        with tabs[2]:
            st.header("üõ†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: Fujikaservice.com")
            
            # ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            service_products = fetch_service_all_products()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
            if service_products:
                df_products = pd.DataFrame(service_products)
                df_products = make_safe_for_streamlit(df_products)  # <-- ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ safe
                st.write("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á DataFrame ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:")
                st.dataframe(df_products)

            # toggle table
            if "show_products_table" not in st.session_state:
                st.session_state.show_products_table = True

            def hide_table():
                st.session_state.show_products_table = False

            if st.button("üõí ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", key="toggle_products_table_top_1"):
                st.session_state.show_products_table = not st.session_state.show_products_table

            if st.session_state.show_products_table:
                st.markdown("### üõí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)")
                
                # --- ‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á ---
                col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5,1,3,1,1,1,1.5])
                with col1: st.markdown("**‡∏•‡∏≥‡∏î‡∏±‡∏ö**")
                with col2: st.markdown("**‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤**")
                with col3: st.markdown("**‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏£‡∏≤‡∏Ñ‡∏≤**")
                with col4: st.markdown("**‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠**")
                with col5: st.markdown("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ**")
                with col6: st.markdown("**‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)**")
                with col7: st.markdown("**‡πÄ‡∏£‡∏ó‡∏ï‡∏¥‡πâ‡∏á**")
                st.markdown("---")

                # --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ---
                for idx, p in enumerate(service_products, start=1):
                    col1, col2, col3, col4, col5, col6, col7 = st.columns([0.5,1,3,1,1,1,1.5])
                    with col1: st.markdown(f"{idx}")
                    with col2: 
                        if p.get("image_url"): st.image(p["image_url"], width=80)
                    with col3:
                        st.markdown(f"**{p.get('name','')}**")
                        st.markdown(f"üíµ {p.get('price',0)} ‡∏ö‡∏≤‡∏ó")
                    with col4: st.markdown(f"{p.get('stock_quantity',0)}")
                    with col5: st.markdown(f"{p.get('quantity_sold',0)}")
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô float ‡∏Å‡πà‡∏≠‡∏ô format
                    total_revenue = float(p.get('total_revenue', 0) or 0)
                    st.markdown(f"{total_revenue:,.2f}")
                    
                    try:
                        avg_rating = float(p.get('average_rating', 0) or 0)
                    except (ValueError, TypeError):
                        avg_rating = 0
                    st.markdown(f"{avg_rating:.1f} ‚≠ê ({p.get('rating_count',0)})")
                    
                    st.markdown("---")

        # --------------------- 4. Shopee ---------------------
        with tabs[3]:
            st.header("üõçÔ∏è ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß Shopee")
            # reviews = shopee_api.get_reviews()
            # st.dataframe(reviews)

        # --------------------- 5. Lazada ---------------------
        with tabs[4]:
            st.header("üì¶ Lazada Orders")
            # if lazada_api.is_token_valid():
            #     orders = lazada_api.get_orders()
            #     st.dataframe(orders)
            # else:
            #     st.warning("‚ö†Ô∏è Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà")
            #     st.markdown(f"[‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö Token ‡πÉ‡∏´‡∏°‡πà]({lazada_api.get_auth_url()})")

        # --------------------- 6. Facebook Page / Ads ---------------------
        with tabs[5]:
            st.title("üìà Fujika Sales & Feedback Dashboard")

                        # app_dashboard_facebook.py
    

            st.sidebar.header("Filter Options")
            page_id = st.secrets["facebook"]["page_id"]
            date_range = st.sidebar.date_input("Select Date Range", [datetime(2025,1,1), datetime.today()])

            # ---------------- Fetch Facebook Data ----------------
            st.subheader("Fetching Facebook Data...")

            user_token = get_fb_token("facebook", page_id, refresh_long_lived_token)
            pages = get_user_pages(user_token)

            fb_posts = []
            fb_comments = []

            for page in pages:
                page_id = page["id"]
                page_token = page["access_token"]

                # ‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
                fb_posts_list = get_page_posts(page_id, page_token)
                for post in fb_posts_list:
                    post_comments = get_comments(post["id"], page_token)
                    for comment in post_comments:
                        comment["post_id"] = post["id"]
                    fb_comments.extend(post_comments)
                fb_posts.extend(fb_posts_list)

            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
            fb_posts_df = pd.DataFrame(fb_posts)
            fb_comments_df = pd.DataFrame(fb_comments)

            # ---------------- Data Overview ----------------
            st.subheader("Data Overview")
            if not fb_posts_df.empty:
                st.write("Facebook Posts Sample:")
                st.dataframe(fb_posts_df.head())
            else:
                st.info("No Facebook posts found")

            if not fb_comments_df.empty:
                st.write("Facebook Comments Sample:")
                st.dataframe(fb_comments_df.head())
            else:
                st.info("No comments found")

            # ---------------- Data Visualization ----------------
            st.subheader("Engagement Analysis")

            # 1Ô∏è‚É£ Facebook Post Engagement (Comments Count)
            if not fb_comments_df.empty:
                fb_comments_count = fb_comments_df.groupby("post_id").size().reset_index(name='comment_count')
                fig_comments = px.bar(fb_comments_count, x='post_id', y='comment_count', title="Facebook Post Engagement (Comments)")
                st.plotly_chart(fig_comments, use_container_width=True)

            # ---------------- Insights ----------------
            st.subheader("Insights for Decision Making")
            if not fb_comments_df.empty:
                avg_comments = fb_comments_df.groupby("post_id").size().mean()
                st.write(f"üí¨ Average comments per post: {avg_comments:.1f}")
                if avg_comments > 5:
                    st.success("Strength: High engagement on Facebook posts")
                else:
                    st.warning("Weakness: Low engagement on Facebook posts, consider boosting content or ads")

            st.success("Facebook Dashboard loaded successfully!")
            data = {
                "‡∏¢‡∏≠‡∏î‡∏î‡∏π": {
                    "value": 35000, "change": -6.3,
                    "followers": 2400, "non_followers": 32600,
                    "trend": np.random.randint(30000, 40000, 7)
                },
                "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á": {
                    "value": 11000, "change": -19.5,
                    "followers": 184, "non_followers": 10816,
                    "trend": np.random.randint(10000, 12000, 7)
                },
                "‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö": {
                    "value": 114, "change": 31,
                    "followers": 8, "non_followers": 106,
                    "trend": np.random.randint(100, 150, 7)
                },
                "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°": {
                    "value": 11, "change": -38.9,
                    "unfollows": 4, "followers": 7,
                    "trend": np.random.randint(5, 20, 7)
                },
            }

            # --- Layout KPI Cards ---
            cols = st.columns(len(data))
            for col, (metric, info) in zip(cols, data.items()):
                with col:
                    st.metric(label=metric, value=info["value"], delta=f"{info['change']}%")
                    st.line_chart(info["trend"], height=100)  # Sparkline

                    # ‡πÅ‡∏™‡∏î‡∏á Followers / Non-followers (Pie Chart) ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
                    if "followers" in info and "non_followers" in info:
                        st.caption("Followers / Non-followers")
                        df_pie = pd.DataFrame({
                            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó": ["Followers", "Non-followers"],
                            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": [info["followers"], info["non_followers"]]
                        })
                        pie = alt.Chart(df_pie).mark_arc().encode(
                            theta=alt.Theta(field="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", type="quantitative"),
                            color=alt.Color(field="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", type="nominal"),
                            tooltip=["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
                        ).properties(width=150, height=150)
                        st.altair_chart(pie)

                    # ‡πÅ‡∏™‡∏î‡∏á Unfollows ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
                    if "unfollows" in info:
                        st.caption(f"Unfollows: {info['unfollows']}")
            st.set_page_config(page_title="Facebook Pages Dashboard", layout="wide")
            st.title("üìä Facebook Pages Dashboard")

            # ----- Loop ‡∏ó‡∏∏‡∏Å Page -----
            for page_id in os.getenv("FACEBOOK_PAGE_IDS"):
                st.header(f"Page ID: {page_id}")

                # ‡∏î‡∏∂‡∏á token ‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏à‡∏à‡∏≤‡∏Å user token
                pages = get_user_pages(os.getenv("FACEBOOK_USER_TOKEN"))
                page = next((p for p in pages if p["id"]==page_id), None)
                if not page:
                    st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏à {page_id} ‡∏´‡∏£‡∏∑‡∏≠ access denied")
                    continue
                page_token = page["access_token"]

                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏à
                page_info = get_page_info(page_id, page_token)
                st.subheader(f"Page Info: {page_info.get('name')}")
                st.write(page_info)

                # ‡∏î‡∏∂‡∏á Page Insights
                insights = get_page_insights(page_id, page_token)
                st.subheader("Page Insights")
                st.write(insights)

                # ‡∏î‡∏∂‡∏á Post ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡πÇ‡∏û‡∏™‡∏ï‡πå
                posts = get_page_posts(page_id, page_token)
                st.subheader("Recent Posts")
                for post in posts:
                    st.markdown(f"**Post ID:** {post['id']}")
                    st.write(post.get("message", "No message"))
                    st.write(f"Created Time: {post['created_time']}")
                    
                    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
                    comments = get_comments(post["id"], page_token)
                    st.write("Comments:")
                    if comments:
                        for c in comments:
                            st.write(f"- {c['from']['name']}: {c['message']}")
                    else:
                        st.write("No comments")           
        # --------------------- 7. LINE OA ---------------------
        with tabs[6]:
            st.header("üí¨ LINE OA Insights")
            # insights = line_oa_scraper.get_line_oa_insight()
            # st.json(insights)
